class Node:
    def __init__(self, data, next = None, prev = None):
        self.data = data
        self.next = next
        self.prev = prev
    
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        
    def forward_traverse(self):
        if self.head == None:
            print("List is empty")
        else:
            temp = self.head
            while(temp != None):
                print(f"{temp.data} <-> ", end="")
                temp = temp.next
            print("Null")
    
    def backward_traverse(self):
        if self.head == None:
            print("List is empty")
        else:
            temp = self.head
            while(temp.next != None):
                temp = temp.next
            while(temp != None):
                print(f"{temp.data} <-> ", end="")
                temp = temp.prev
            print("Null")
        
    def insert_at_beginning(self, data):
        newNode = Node(data)
        if self.head == None:
            self.head = newNode
        else:
            newNode.next = self.head
            self.head.prev = newNode
            self.head = newNode
            
    def insert_at_end(self, data):
        newNode = Node(data)
        if self.head == None:
            self.head == newNode
        else:
            temp = self.head
            while(temp.next != None):
                temp = temp.next
            temp.next = newNode
            newNode.prev = temp
    
    def insert_at_index(self, data, index):
        newNode = Node(data)
        if index == 0:
            self.insert_at_beginning(data)
        else:
            temp = self.head
            current_index = 0
            while(temp != None and current_index < index-1):
                temp = temp.next
                current_index += 1
            if temp == None:
                print(f"Index {index} is out of range, inserting at the end.")
                self.insert_at_end(data)
            elif temp.next == None:
                self.insert_at_end(data)
            else:
                newNode.next = temp.next
                newNode.prev = temp
                temp.next.prev = newNode
                temp.next = newNode
    
    def delete_at_index(self, index):
        if self.head == None:
            print("List is empty, nothing to delete.")
        else:
            temp = self.head
            current_index = 0
            while(temp != None and current_index < index):
                temp = temp.next
                current_index += 1
            if temp == None:
                print(f"Index {index} is out of range, deletion not possible.")
            elif temp.next == None:
                temp.prev == None
            else:
                temp.prev.next = temp.next
                temp.next.prev = temp.prev
        
if __name__ == "__main__":
    x=DoublyLinkedList()
    x.insert_at_beginning(10)
    x.insert_at_beginning(20)
    x.insert_at_beginning(30)
    x.insert_at_end(40)
    x.insert_at_index(50, 2)
    x.forward_traverse()
    x.delete_at_index(2)
    x.backward_traverse()
